{"version":3,"sources":["../src/types.ts"],"sourcesContent":["export type Primitive = string | number | boolean\n\nexport interface Hash {\n  [key: string]: Primitive\n}\n\nexport interface Headers {\n  readonly [key: string]: Primitive\n}\n\nexport type Body = Record<string, unknown> | string\n\nexport interface Auth {\n  username?: string\n  password?: string\n  readonly [key: string]: Primitive | undefined\n}\n\nexport interface Params {\n  readonly [key: string]: object | Primitive | undefined | null\n}\n\nexport interface NestedParam {\n  // We need the NestedParamArray here for circularity\n  // eslint-disable-next-line no-use-before-define\n  [param: string]: Primitive | undefined | null | NestedParam | NestedParamArray\n}\n\n// Eslint will try to fix this to a type, but we need it as an interface for the recursability\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface NestedParamArray extends Array<Primitive | NestedParam | NestedParamArray> {}\n\nexport interface RequestParams {\n  readonly auth?: Auth\n  readonly body?: Body\n  readonly headers?: Headers\n  readonly host?: string\n  readonly path?: string\n  readonly params?: Params\n  readonly timeout?: number\n  [param: string]: object | Primitive | undefined | null | NestedParam | NestedParamArray\n}\n\nexport type ParameterEncoderFn = (arg: Primitive) => string\n"],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;","names":[]}