import { configs } from './mappersmith';
import type { GlobalConfigs, ManifestOptions, ResourceTypeConstraint } from './manifest';
export type { GlobalConfigs, ManifestOptions, ResourceTypeConstraint };
export type { Request, RequestContext } from './request';
export type { Primitive, Hash, Headers, Body, Params as Parameters, Auth as Authorization, NestedParam, NestedParamArray, RequestParams, ParameterEncoderFn, } from './types';
export type { Gateway } from './gateway/index';
export type { XHR as XhrGateway } from './gateway/xhr';
export type { HTTP as HTTPGateway } from './gateway/http';
export type { Fetch as FetchGateway } from './gateway/fetch';
export type { Mock as MockGateway } from './gateway/mock';
export type { HTTPRequestParams, HTTPGatewayConfiguration, GatewayConfiguration, } from './gateway/types';
export { Response } from './response';
export type { ParsedJSON } from './response';
export type { AbortFn, Context, Middleware, MiddlewareDescriptor, MiddlewareParams, RenewFn, RequestGetter, ResponseGetter, } from './middleware/index';
export type { AsyncFunction, AsyncFunctions, Client, ClientBuilder } from './client-builder';
export type { MethodDescriptor, MethodDescriptorParams } from './method-descriptor';
/**
 * @deprecated, use ManifestOptions instead
 */
export type Options<Resources extends ResourceTypeConstraint> = ManifestOptions<Resources>;
/**
 * @deprecated, use GlobalConfigs instead
 */
export type Configuration = GlobalConfigs;
export { forge as default, forge, version, setContext } from './mappersmith';
export { configs };
